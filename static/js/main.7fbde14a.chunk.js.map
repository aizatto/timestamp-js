{"version":3,"sources":["Navbar.tsx","App.tsx","SettingsContext.tsx","Field.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","_useState","useState","_useState2","Object","slicedToArray","collapsed","setCollapsed","react_default","a","createElement","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","className","NavItem","NavLink","KeyCode","KeyboardToIndex","SettingsContext","React","createContext","date","Date","moment","clipboard","setClipboard","_","Field","forwardRef","props","ref","_useContext","useContext","copied","content","useImperativeHandle","value","alertBox","Alert","Fragment","inputType","includes","code","replace","InputGroup","InputGroupAddon","addonType","Button","Input","type","readOnly","Time","str","strftime","fmt","concat","Moment","format","App","settings","setDate","_useState3","_useState4","setMoment","_useState5","_useState6","alertText","setAlertText","windowOnKeyDownListener","useRef","refs","refreshTimestamps","newDate","newMoment","current","copyToClipboard","listener","event","altKey","ctrlKey","metaKey","shiftKey","DIGIT_1","keyCode","DIGIT_9","index","A","Z","window","addEventListener","doy","dayOfYear","src_SettingsContext","Provider","Navbar_Navbar","Container","KEY_1","KEY_2","KEY_3","KEY_4","KEY_5","Math","floor","getTime","toString","toISOString","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7fbde14a.chunk.js","sourcesContent":["/**\n * https://reactstrap.github.io/components/navbar/\n */\nimport React, { useState } from 'react';\nimport {\n  Collapse,\n  Nav,\n  Navbar as BootstrapNavbar,\n  NavbarBrand,\n  NavLink,\n  NavItem,\n  NavbarToggler,\n} from 'reactstrap';\n\nexport default function Navbar() {\n  const [collapsed, setCollapsed] = useState(false);\n\n  return (\n    <BootstrapNavbar color=\"dark\" dark expand=\"md\">\n      <NavbarBrand href=\"https://www.aizatto.com\">aizatto.com</NavbarBrand>\n      <NavbarToggler onClick={() => setCollapsed(!collapsed)} />\n      <Collapse isOpen={collapsed} navbar>\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink href=\"https://www.aizatto.com/\">aizatto.com</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://www.deepthoughtapp.com/\">Deep Thought</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://www.logbook.my/\">Logbook</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://github.com/aizatto/timestamp-js\">GitHub</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://www.linkedin.com/in/aizatto\">LinkedIn</NavLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </BootstrapNavbar>\n  );\n}\n","/* eslint-env browser */\n/* eslint-disable react/no-multi-comp */\nimport React, { useContext, useState, useRef } from 'react';\nimport { Alert, Button, Container } from 'reactstrap';\nimport moment from 'moment';\nimport copyToClipboard from 'copy-to-clipboard';\nimport { dayOfYear } from 'aizatto/lib/fn';\nimport Navbar from './Navbar';\nimport { Field, Time, Moment } from './Field';\nimport SettingsContext from './SettingsContext';\nimport \"./bootstrap.min.css\";\n\ninterface CopyHandler {\n  value: () => string,\n}\n\n/* eslint-disable no-unused-vars */\nenum KeyCode {\n//  DIGIT_0 = 48,\n  DIGIT_1 = 49,\n  DIGIT_9 = 57,\n  A = 65,\n  Z = 90,\n}\n\nenum KeyboardToIndex {\n  KEY_1 = 0,\n  KEY_2,\n  KEY_3,\n  KEY_4,\n  KEY_5,\n}\n/* eslint-enable -no-unused-vars */\n\nfunction App() {\n  const settings = useContext(SettingsContext);\n\n  const [date, setDate] = useState(settings.date);\n  const [mmt, setMoment] = useState(settings.moment);\n  const [alertText, setAlertText] = useState<JSX.Element | null>();\n  const windowOnKeyDownListener = useRef<(event: KeyboardEvent) => void>();\n\n  // I don't use a loop because it is a Hook Rule to not place hooks\n  // in loops\n  // See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\n  const refs = [\n    useRef({} as CopyHandler),\n    useRef({} as CopyHandler),\n    useRef({} as CopyHandler),\n    useRef({} as CopyHandler),\n    useRef({} as CopyHandler),\n  ];\n\n  const refreshTimestamps = () => {\n    const newDate = new Date();\n    const newMoment = moment();\n\n    settings.clipboard = '';\n    settings.date = newDate;\n    settings.moment = newMoment;\n    setDate(newDate);\n    setMoment(newMoment);\n    setAlertText(\n      <>\n        Refreshed at: \n        {' '}\n        <code>{newMoment.format(\"YYYY/MM/DD LTS - [W]W/[D]E dddd\")}</code>\n      </>\n    );\n  }\n\n  if (!windowOnKeyDownListener.current) {\n    settings.setClipboard = (value: string) => {\n      settings.clipboard = value;\n      copyToClipboard(value);\n      setAlertText(\n        <>\n        Copied to clipboard:\n          {' '}\n          <code>{value}</code>\n        </>\n      );\n    }\n    const listener = (event: KeyboardEvent) => {\n      if (event.altKey ||\n          event.ctrlKey ||\n          event.metaKey ||\n          event.shiftKey) {\n        return;\n      }\n\n      if ((KeyCode.DIGIT_1 <= event.keyCode && event.keyCode <= KeyCode.DIGIT_9)) {\n        const index = event.keyCode - KeyCode.DIGIT_1;\n        const ref = refs[index];\n        if (ref && ref.current && ref.current.value) {\n          const value = ref.current.value();\n          settings.setClipboard(value);\n        }\n      }\n      if ((KeyCode.A <= event.keyCode && event.keyCode <= KeyCode.Z)) {\n        refreshTimestamps();\n      }\n    };\n    windowOnKeyDownListener.current = listener;\n    window.addEventListener('keydown', listener);\n  }\n  \n  const alertBox = alertText \n    ? <Alert color=\"success\">{alertText}</Alert>\n    : null;\n\n  const doy = dayOfYear(settings.date);\n\n  return (\n    <div>\n      <SettingsContext.Provider value={settings}>\n        <Navbar />\n        <Container className=\"pt-3\">\n          {alertBox}\n          <Button onClick={refreshTimestamps} className=\"float-right\">Refresh</Button>\n          <h1><code>Frequently Used</code></h1>\n          <Moment ref={refs[KeyboardToIndex.KEY_1]} fmt=\"LTS: \" />\n          <Moment ref={refs[KeyboardToIndex.KEY_2]} fmt={`YYYY/MM/DD [W]W/[D]E dddd - [D]${doy}/366[R] [\\n]LTS: `} />\n          <Moment ref={refs[KeyboardToIndex.KEY_3]} fmt=\"YYYY/MM/DD LTS - [W]W/[D]E dddd\" />\n          <Moment ref={refs[KeyboardToIndex.KEY_4]} fmt=\"YYYY/MM/DD [W]W/[D]E dddd\" />\n          <Moment ref={refs[KeyboardToIndex.KEY_5]} fmt={`YYYY/MM/DD LTS - [W]W/[D]E dddd - [D]${doy}/366[R]`} />\n          <h1><code>Date</code></h1>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">\n            MDN: Date\n          </a>\n          <Field code=\"Math.floor(Date.now() / 1000)\" content={Math.floor(date.getTime() / 1000).toString()} />\n          <Field code=\"Date.now()\" content={date.getTime().toString()} />\n          <Field code=\"new Date().toISOString()\" content={date.toISOString()} />\n          <h1><code>strftime</code></h1>\n          <a href=\"https://www.npmjs.com/package/strftime\">https://www.npmjs.com/package/strftime</a>\n          <Time fmt=\"%H:%M%P\" />\n          <Time fmt=\"%Y/%m/%d\" />\n          <Time fmt=\"%Y/%m/%d %H:%M:%S%P\" />\n          <Time fmt=\"%Y%m%d%H%M%S %Y %b %d\" />\n          <h1><code>moment</code></h1>\n          <a href=\"http://momentjs.com/\">http://momentjs.com/</a>\n          <Moment fmt=\"dddd Do MMMM YYYY LTS\" />\n          <Moment fmt=\"YYYY/MM/DD LTS - [W]W/[D]E dddd\" />\n          Keyboard Shortcuts:\n          <ul>\n            <li>\n              Press any key from\n              {' '}\n              <code>A to Z</code>\n              {' '}\n              to refresh. Case insensitive.\n            </li>\n            <li>\n              Press any key from\n              {' '}\n              <code>1 to 0</code>\n              {' '}\n              to copy to clipboard.\n            </li>\n          </ul>\n          Packages:\n          <ul>\n            <li>\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">\n            MDN: Date\n              </a>\n            </li>\n            <li><a href=\"https://www.npmjs.com/package/strftime\">https://www.npmjs.com/package/strftime</a></li>\n            <li><a href=\"http://momentjs.com/\">http://momentjs.com/</a></li>\n            <li><a href=\"https://date-fns.org/\">https://date-fns.org/</a></li>\n          </ul>\n        </Container>\n      </SettingsContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport moment from 'moment';\n\nconst SettingsContext = React.createContext({\n  date: new Date(),\n  moment: moment(),\n  clipboard: '',\n  setClipboard: (_: string) => {},\n});\n\nexport default SettingsContext;\n","import React, { useContext, useImperativeHandle } from 'react';\nimport { Alert, Button, Input, InputGroup, InputGroupAddon } from 'reactstrap';\nimport strftime from 'strftime';\nimport SettingsContext from './SettingsContext';\n\nexport const Field = React.forwardRef((props: {content: string, code: string}, ref) => {\n  const { clipboard, setClipboard } = useContext(SettingsContext);\n\n  const copied = clipboard === props.content;\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      value: () => {\n        return props.content;\n      }\n    }),\n    [props.content],\n  );\n\n  const onClick = () => {\n    setClipboard(props.content);\n  }\n\n  const alertBox = copied\n    ? (\n      <Alert color=\"success\" className=\"mt-1\">\n        <>\n          Copied to clipboard:\n          {' '}\n          <code>{props.content}</code>\n        </>\n      </Alert>\n)\n    : null\n\n  const inputType = props.content.includes(\"\\n\") ? 'textarea' : 'text';\n\n  return (\n    <div className=\"mb-2\">\n      <code>{props.code.replace(/\\n/g, \"\\\\n\")}</code>\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">\n          <Button onClick={onClick}>Copy</Button>\n        </InputGroupAddon>\n        <Input type={inputType} value={props.content} readOnly />\n      </InputGroup>\n      {alertBox}\n    </div>\n  );\n});\n\nexport const Time = React.forwardRef((props: {fmt: string}, ref) => {\n  const { date } = useContext(SettingsContext);\n  const str = strftime(props.fmt, date);\n  return <Field ref={ref} code={`strftime(\"${props.fmt}\")`} content={str} />;\n});\n\nexport const Moment = React.forwardRef((props: {fmt: string }, ref) => {\n  const { moment: mmt } = useContext(SettingsContext);\n  const str = mmt.format(props.fmt);\n  return <Field ref={ref} code={`moment().format(\"${props.fmt}\")`} content={str} />;\n});\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-env browser */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}