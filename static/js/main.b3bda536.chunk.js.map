{"version":3,"sources":["App.tsx","Navbar.tsx","serviceWorker.ts","index.tsx"],"names":["KeyCode","KeyboardToIndex","Navbar","_useState","useState","_useState2","Object","slicedToArray","collapsed","setCollapsed","react_default","a","createElement","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","className","NavItem","NavLink","history","dates","Date","moments","moment","SettingsContext","React","createContext","date","clipboard","setClipboard","_","Field","forwardRef","props","ref","_useContext","useContext","copied","content","useImperativeHandle","value","alertBox","Alert","Fragment","code","InputGroup","InputGroupAddon","addonType","Button","Input","readOnly","Time","str","strftime","fmt","concat","Moment","format","App","setDate","_useState3","_useState4","setMoment","_useState5","_useState6","alertText","setAlertText","windowOnKeyDownListener","useRef","settings","refs","refreshTimestamps","newDate","newMoment","push","current","copyToClipboard","listener","event","DIGIT_1","keyCode","DIGIT_9","index","A","Z","window","addEventListener","Provider","Navbar_Navbar","Container","KEY_1","KEY_2","KEY_3","Math","floor","getTime","toString","toISOString","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b3bda536.chunk.js","sourcesContent":["/* eslint-env browser */\n/* eslint-disable react/no-multi-comp */\nimport React, { useContext, useState, useRef, useImperativeHandle } from 'react';\nimport strftime from 'strftime';\nimport {\n  Alert,\n  Button,\n  Container,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n} from 'reactstrap';\nimport moment from 'moment';\nimport copyToClipboard from 'copy-to-clipboard';\nimport Navbar from './Navbar';\n\ninterface CopyHandler {\n  value: () => string,\n}\n\n/* eslint-disable no-unused-vars */\nenum KeyCode {\n//  DIGIT_0 = 48,\n  DIGIT_1 = 49,\n  DIGIT_9 = 57,\n  A = 65,\n  Z = 90,\n}\n\nenum KeyboardToIndex {\n  KEY_1 = 0,\n  KEY_2,\n  KEY_3,\n}\n/* eslint-enable -no-unused-vars */\n\nconst history = {\n  dates: [\n    new Date(),\n  ],\n  moments: [\n    moment(),\n  ]\n};\n\nconst SettingsContext = React.createContext({\n  date: history.dates[0],\n  moment: history.moments[0],\n  clipboard: '',\n  setClipboard: (_: string) => {},\n});\n\nconst Field = React.forwardRef((props: {content: string, code: string}, ref) => {\n  const { date, clipboard, setClipboard } = useContext(SettingsContext);\n\n  const copied = clipboard === props.content;\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      value: () => {\n        return props.content;\n      }\n    }),\n    [props.content],\n  );\n\n  const onClick = () => {\n    setClipboard(props.content);\n  }\n\n  const alertBox = copied\n    ? (\n      <Alert color=\"success\" className=\"mt-1\">\n        <>\n          Copied to clipboard:\n          {' '}\n          <code>{props.content}</code>\n        </>\n      </Alert>\n)\n    : null\n\n  return (\n    <div className=\"mb-2\">\n      <code>{props.code}</code>\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">\n          <Button onClick={onClick}>Copy</Button>\n        </InputGroupAddon>\n        <Input value={props.content} readOnly />\n      </InputGroup>\n      {alertBox}\n    </div>\n  );\n});\n\nconst Time = React.forwardRef((props: {fmt: string}, ref) => {\n  const { date } = useContext(SettingsContext);\n  const str = strftime(props.fmt, date);\n  return <Field ref={ref} code={`strftime(\"${props.fmt}\")`} content={str} />;\n});\n\nconst Moment = React.forwardRef((props: {fmt: string }, ref) => {\n  const { moment: mmt } = useContext(SettingsContext);\n  const str = mmt.format(props.fmt);\n  return <Field ref={ref} code={`moment().format(\"${props.fmt}\")`} content={str} />;\n});\n\n\nfunction App() {\n  const [date, setDate] = useState(history.dates[0]);\n  const [mmt, setMoment] = useState(history.moments[0]);\n  const [alertText, setAlertText] = useState<JSX.Element | null>();\n  const windowOnKeyDownListener = useRef<(event: KeyboardEvent) => void>();\n\n  const settings = useContext(SettingsContext);\n\n  // I don't use a loop because it is a Hook Rule to not place hooks\n  // in loops\n  // See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\n  const refs = [\n    useRef({} as CopyHandler),\n    useRef({} as CopyHandler),\n    useRef({} as CopyHandler),\n  ];\n\n  const refreshTimestamps = () => {\n    const newDate = new Date();\n    const newMoment = moment();\n\n    settings.date = newDate;\n    settings.moment = newMoment;\n    settings.clipboard = '';\n    history.dates.push(newDate)\n    history.moments.push(newMoment);\n    setDate(newDate);\n    setMoment(newMoment);\n    setAlertText(\n      <>\n        Refreshed at: \n        {' '}\n        <code>{newMoment.format(\"YYYY/MM/DD LTS - [W]W/[D]E dddd\")}</code>\n      </>\n    );\n  }\n\n  if (!windowOnKeyDownListener.current) {\n    settings.setClipboard = (value: string) => {\n      settings.clipboard = value;\n      copyToClipboard(value);\n      setAlertText(\n        <>\n        Copied to clipboard:\n          {' '}\n          <code>{value}</code>\n        </>\n      );\n    }\n    const listener = (event: KeyboardEvent) => {\n      if ((KeyCode.DIGIT_1 <= event.keyCode && event.keyCode <= KeyCode.DIGIT_9)) {\n        const index = event.keyCode - KeyCode.DIGIT_1;\n        const ref = refs[index];\n        if (ref && ref.current && ref.current.value) {\n          const value = ref.current.value();\n          settings.setClipboard(value);\n        }\n      }\n      if ((KeyCode.A <= event.keyCode && event.keyCode <= KeyCode.Z)) {\n        refreshTimestamps();\n      }\n    };\n    windowOnKeyDownListener.current = listener;\n    window.addEventListener('keydown', listener);\n  }\n  \n  const alertBox = alertText \n    ? <Alert color=\"success\">{alertText}</Alert>\n    : null;\n\n  return (\n    <div>\n      <SettingsContext.Provider value={settings}>\n        <Navbar />\n        <Container className=\"pt-3\">\n          {alertBox}\n          <Button onClick={refreshTimestamps} className=\"float-right\">Refresh</Button>\n          <h1><code>Frequently Used</code></h1>\n          <Moment ref={refs[KeyboardToIndex.KEY_1]} fmt=\"YYYY/MM/DD LTS - [W]W/[D]E dddd\" />\n          <Moment ref={refs[KeyboardToIndex.KEY_2]} fmt=\"YYYY/MM/DD [W]W/[D]E dddd\" />\n          <Moment ref={refs[KeyboardToIndex.KEY_3]} fmt=\"LTS: \" />\n          <h1><code>Date</code></h1>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">\n            MDN: Date\n          </a>\n          <Field code=\"Math.floor(Date.now() / 1000)\" content={Math.floor(date.getTime() / 1000).toString()} />\n          <Field code=\"Date.now()\" content={date.getTime().toString()} />\n          <Field code=\"new Date().toISOString()\" content={date.toISOString()} />\n          <h1><code>strftime</code></h1>\n          <a href=\"https://www.npmjs.com/package/strftime\">https://www.npmjs.com/package/strftime</a>\n          <Time fmt=\"%H:%M%P\" />\n          <Time fmt=\"%Y/%m/%d\" />\n          <Time fmt=\"%Y/%m/%d %H:%M:%S%P\" />\n          <h1><code>moment</code></h1>\n          <a href=\"http://momentjs.com/\">http://momentjs.com/</a>\n          <Moment fmt=\"dddd Do MMMM YYYY LTS\" />\n          <Moment fmt=\"YYYY/MM/DD LTS - [W]W/[D]E dddd\" />\n          Keyboard Shortcuts:\n          <ul>\n            <li>\n              Press any key from\n              {' '}\n              <code>A to Z</code>\n              {' '}\n              to refresh. Case insensitive.\n            </li>\n            <li>\n              Press any key from\n              {' '}\n              <code>1 to 0</code>\n              {' '}\n              to copy to clipboard.\n            </li>\n          </ul>\n          Packages:\n          <ul>\n            <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">\n            MDN: Date\n            </a></li>\n            <li><a href=\"https://www.npmjs.com/package/strftime\">https://www.npmjs.com/package/strftime</a></li>\n            <li><a href=\"http://momentjs.com/\">http://momentjs.com/</a></li>\n            <li><a href=\"https://date-fns.org/\">https://date-fns.org/</a></li>\n          </ul>\n        </Container>\n      </SettingsContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/**\n * https://reactstrap.github.io/components/navbar/\n */\nimport React, { useState } from 'react';\nimport {\n  Collapse,\n  Nav,\n  Navbar as BootstrapNavbar,\n  NavbarBrand,\n  NavLink,\n  NavItem,\n  NavbarToggler,\n} from 'reactstrap';\n\nexport default function Navbar() {\n  const [collapsed, setCollapsed] = useState(false);\n\n  return (\n    <BootstrapNavbar color=\"dark\" dark expand=\"md\">\n      <NavbarBrand href=\"https://www.aizatto.com\">aizatto.com</NavbarBrand>\n      <NavbarToggler onClick={() => setCollapsed(!collapsed)} />\n      <Collapse isOpen={collapsed} navbar>\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink href=\"https://www.aizatto.com/\">aizatto.com</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://www.deepthoughtapp.com/\">Deep Thought</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://github.com/aizatto/timestamp-js\">GitHub</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://www.linkedin.com/in/aizatto\">LinkedIn</NavLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </BootstrapNavbar>\n  );\n}\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-env browser */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}