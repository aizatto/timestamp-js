{"version":3,"sources":["Navbar.tsx","App.tsx","SettingsContext.tsx","Field.tsx","DB.ts","serviceWorker.ts","index.tsx"],"names":["Navbar","useState","collapsed","setCollapsed","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","className","NavItem","NavLink","KeyCode","SettingsContext","React","createContext","date","Date","moment","clipboard","setClipboard","_","Field","forwardRef","props","ref","useContext","copied","content","useImperativeHandle","fmtKey","value","alertBox","Alert","inputType","includes","code","replace","InputGroup","InputGroupAddon","addonType","Button","Input","type","readOnly","Time","str","strftime","fmt","Moment","format","prefix","formats","a","fn","doy","b","c","d","e","f","DB","counts","localStorageCounts","window","localStorage","getItem","Map","JSON","parse","Object","keys","forEach","key","has","set","this","Array","from","entries","sort","get","map","setItem","stringify","db","App","settings","datepickerFocus","setDatepickerFocus","setDate","setMoment","alertText","setAlertText","windowOnKeyDownListener","useRef","refs","setTimestamps","newDate","newMoment","refreshTimestamps","current","copyToClipboard","listener","event","altKey","ctrlKey","metaKey","shiftKey","DIGIT_1","keyCode","DIGIT_9","index","increment","A","Z","addEventListener","dayOfYear","frequentlyUsed","popular","Provider","Container","selected","onFocus","onBlur","onChange","showTimeSelect","timeFormat","timeIntervals","dateFormat","timeCaption","disabledKeyboardNavigation","Math","floor","getTime","toString","toISOString","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.af0c1717.chunk.js","sourcesContent":["/**\n * https://reactstrap.github.io/components/navbar/\n */\nimport React, { useState } from 'react';\nimport {\n  Collapse,\n  Nav,\n  Navbar as BootstrapNavbar,\n  NavbarBrand,\n  NavLink,\n  NavItem,\n  NavbarToggler,\n} from 'reactstrap';\n\nexport default function Navbar() {\n  const [collapsed, setCollapsed] = useState(false);\n\n  return (\n    <BootstrapNavbar color=\"dark\" dark expand=\"md\">\n      <NavbarBrand href=\"https://www.aizatto.com\">aizatto.com</NavbarBrand>\n      <NavbarToggler onClick={() => setCollapsed(!collapsed)} />\n      <Collapse isOpen={collapsed} navbar>\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink href=\"https://www.aizatto.com/\">aizatto.com</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://www.deepthoughtapp.com/\">Deep Thought</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://www.logbook.my/\">Logbook</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://github.com/aizatto/timestamp-js\">GitHub</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://www.linkedin.com/in/aizatto\">LinkedIn</NavLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </BootstrapNavbar>\n  );\n}\n","/* eslint-env browser */\n/* eslint-disable react/no-multi-comp */\nimport React, { useContext, useState, useRef } from 'react';\nimport { Alert, Button, Container } from 'reactstrap';\nimport moment from 'moment';\nimport copyToClipboard from 'copy-to-clipboard';\nimport { dayOfYear } from 'aizatto/lib/fn';\n\n// @ts-ignore\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./datepicker.css\";\n\nimport Navbar from './Navbar';\nimport { Field, Time, Moment } from './Field';\nimport SettingsContext from './SettingsContext';\nimport \"./bootstrap.min.css\";\nimport { DB, formats } from './DB';\n\ninterface CopyHandler {\n  fmtKey?: string,\n  value: () => string,\n}\n\nenum KeyCode {\n//  DIGIT_0 = 48,\n  DIGIT_1 = 49,\n  DIGIT_9 = 57,\n  A = 65,\n  Z = 90,\n}\n\nconst db = new DB();\n\nfunction App() {\n  const settings = useContext(SettingsContext);\n\n  const [datepickerFocus, setDatepickerFocus] = useState(false);\n  const [date, setDate] = useState(settings.date);\n  const [, setMoment] = useState(settings.moment);\n  const [alertText, setAlertText] = useState<JSX.Element | null>();\n  const windowOnKeyDownListener = useRef<(event: KeyboardEvent) => void>();\n\n  // I don't use a loop because it is a Hook Rule to not place hooks\n  // in loops\n  // See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\n  const refs = [\n    useRef({} as CopyHandler), // 1\n    useRef({} as CopyHandler), // 2\n    useRef({} as CopyHandler), // 3\n    useRef({} as CopyHandler), // 4\n    useRef({} as CopyHandler), // 5\n    useRef({} as CopyHandler), // 6\n    useRef({} as CopyHandler), // 7\n  ];\n\n  const setTimestamps = (newDate: Date) => {\n    const newMoment = moment(newDate);\n\n    settings.clipboard = '';\n    settings.date = newDate;\n    settings.moment = newMoment;\n    setDate(newDate);\n    setMoment(newMoment);\n    setAlertText(\n      <>\n        Refreshed to:\n        {' '}\n        <code>{newMoment.format(\"YYYY/MM/DD LTS - [W]W/[D]E dddd\")}</code>\n      </>\n    );\n  }\n\n  const refreshTimestamps = () => {\n    setTimestamps(new Date());\n  }\n\n  if (!windowOnKeyDownListener.current) {\n    settings.setClipboard = (value: string) => {\n      if (datepickerFocus) {\n        return;\n      }\n      settings.clipboard = value;\n      copyToClipboard(value);\n      setAlertText(\n        <>\n        Copied to clipboard:\n          {' '}\n          <code>{value}</code>\n        </>\n      );\n    }\n    const listener = (event: KeyboardEvent) => {\n      if (datepickerFocus ||\n          event.altKey ||\n          event.ctrlKey ||\n          event.metaKey ||\n          event.shiftKey) {\n        return;\n      }\n\n      if ((KeyCode.DIGIT_1 <= event.keyCode && event.keyCode <= KeyCode.DIGIT_9)) {\n        const index = event.keyCode - KeyCode.DIGIT_1;\n        const ref = refs[index];\n        if (ref && ref.current && ref.current.value) {\n          const value = ref.current.value();\n          settings.setClipboard(value);\n          const fmtKey = ref.current.fmtKey;\n          if (fmtKey) {\n            db.increment(fmtKey);\n          }\n        }\n      }\n      if ((KeyCode.A <= event.keyCode && event.keyCode <= KeyCode.Z)) {\n        refreshTimestamps();\n      }\n    };\n    windowOnKeyDownListener.current = listener;\n    window.addEventListener('keydown', listener);\n  }\n  \n  const alertBox = alertText \n    ? <Alert color=\"success\">{alertText}</Alert>\n    : null;\n\n  const doy = dayOfYear(settings.date);\n  const frequentlyUsed = db.popular().map(([key], index) => {\n    const ref = refs[index];\n    const format = formats[key].fn(doy as number);\n    return (\n      <Moment key={key} fmtKey={key} ref={ref} fmt={format} prefix={`${index + 1}: `} />\n    );\n  })\n\n  return (\n    <div>\n      <SettingsContext.Provider value={settings}>\n        <Navbar />\n        <Container className=\"pt-3\">\n          {alertBox}\n          <div className=\"mb-2\">\n          <Button onClick={refreshTimestamps} className=\"float-right\">Refresh</Button>\n          <DatePicker\n            selected={date}\n            onFocus={() => setDatepickerFocus(true)}\n            onBlur={() => setDatepickerFocus(false)}\n            onChange={(newDate: Date) => { setTimestamps(newDate); }}\n            className=\"form-control\"\n            showTimeSelect\n            timeFormat=\"HH:mm\"\n            timeIntervals={15}\n            dateFormat=\"MMMM d, yyyy h:mm:ss aa\"\n            timeCaption=\"time\"\n            disabledKeyboardNavigation\n          />\n          </div>\n          <h1><code>Frequently Used</code></h1>\n          {frequentlyUsed}\n          <h1><code>Date</code></h1>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">\n            MDN: Date\n          </a>\n          <Field code=\"Math.floor(Date.now() / 1000)\" content={Math.floor(date.getTime() / 1000).toString()} />\n          <Field code=\"Date.now()\" content={date.getTime().toString()} />\n          <Field code=\"new Date().toISOString()\" content={date.toISOString()} />\n          <h1><code>strftime</code></h1>\n          <a href=\"https://www.npmjs.com/package/strftime\">https://www.npmjs.com/package/strftime</a>\n          <Time fmt=\"%H:%M%P\" />\n          <Time fmt=\"%Y/%m/%d\" />\n          <Time fmt=\"%Y/%m/%d %H:%M:%S%P\" />\n          <Time fmt=\"%Y%m%d%H%M%S %Y %b %d\" />\n          <h1><code>moment</code></h1>\n          <a href=\"http://momentjs.com/\">http://momentjs.com/</a>\n          <Moment fmt=\"dddd Do MMMM YYYY LTS\" />\n          <Moment fmt=\"YYYY/MM/DD LTS - [W]W/[D]E dddd\" />\n          Keyboard Shortcuts:\n          <ul>\n            <li>\n              Press any key from\n              {' '}\n              <code>A to Z</code>\n              {' '}\n              to refresh. Case insensitive.\n            </li>\n            <li>\n              Press any key from\n              {' '}\n              <code>1 to 0</code>\n              {' '}\n              to copy to clipboard.\n            </li>\n          </ul>\n          Packages:\n          <ul>\n            <li>\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">\n            MDN: Date\n              </a>\n            </li>\n            <li><a href=\"https://www.npmjs.com/package/strftime\">https://www.npmjs.com/package/strftime</a></li>\n            <li><a href=\"http://momentjs.com/\">http://momentjs.com/</a></li>\n            <li><a href=\"https://date-fns.org/\">https://date-fns.org/</a></li>\n          </ul>\n        </Container>\n      </SettingsContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport moment from 'moment';\n\nconst SettingsContext = React.createContext({\n  date: new Date(),\n  moment: moment(),\n  clipboard: '',\n  setClipboard: (_: string) => {},\n});\n\nexport default SettingsContext;\n","import React, { useContext, useImperativeHandle } from 'react';\nimport { Alert, Button, Input, InputGroup, InputGroupAddon } from 'reactstrap';\nimport strftime from 'strftime';\nimport SettingsContext from './SettingsContext';\n\nexport const Field = React.forwardRef((props: {content: string, code: string, fmtKey?: string}, ref) => {\n  const { clipboard, setClipboard } = useContext(SettingsContext);\n\n  const copied = clipboard === props.content;\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      fmtKey: props.fmtKey,\n      value: () => {\n        return props.content;\n      }\n    }),\n  );\n\n  const onClick = () => {\n    setClipboard(props.content);\n  }\n\n  const alertBox = copied\n    ? (\n      <Alert color=\"success\" className=\"mt-1\">\n        <>\n          Copied to clipboard:\n          {' '}\n          <code>{props.content}</code>\n        </>\n      </Alert>\n)\n    : null\n\n  const inputType = props.content.includes(\"\\n\") ? 'textarea' : 'text';\n\n  return (\n    <div className=\"mb-2\">\n      <code>{props.code.replace(/\\n/g, \"\\\\n\")}</code>\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">\n          <Button onClick={onClick}>Copy</Button>\n        </InputGroupAddon>\n        <Input type={inputType} value={props.content} readOnly />\n      </InputGroup>\n      {alertBox}\n    </div>\n  );\n});\n\nexport const Time = React.forwardRef((props: {fmt: string}, ref) => {\n  const { date } = useContext(SettingsContext);\n  const str = strftime(props.fmt, date);\n  return <Field ref={ref} code={`strftime(\"${props.fmt}\")`} content={str} />;\n});\n\nexport const Moment = React.forwardRef((props: {fmt: string, fmtKey?: string, prefix?: string }, ref) => {\n  const { moment: mmt } = useContext(SettingsContext);\n  const str = mmt.format(props.fmt);\n  return <Field fmtKey={props.fmtKey} ref={ref} code={`${props.prefix}moment().format(\"${props.fmt}\")`} content={str} />;\n});\n","type Formats = {\n  [key: string]: {\n    fn: (doy: number) => string;\n  }\n}\n\nexport const formats: Formats = {\n  a: {\n    fn: (doy: number) => {\n      return \"LTS: \";\n    },\n  },\n  b: {\n    fn: (doy: number) => {\n      return `YYYY/MM/DD [W]W/[D]E dddd - [D]${doy}/366[R] [\\n]LTS: `;\n    },\n  },\n  c: {\n    fn: (doy: number) => {\n      return \"YYYY/MM/DD LTS - [W]W/[D]E dddd\";\n    },\n  },\n  d: {\n    fn: (doy: number) => {\n      return `YYYY/MM/DD LTS - [W]W/[D]E dddd - [D]${doy}/366[R]`;\n    },\n  },\n  e: {\n    fn: (doy: number) => {\n      return `YYYY[W]W: YYYY/MM/DD`;\n    },\n  },\n  f: {\n    fn: (doy: number) => {\n      return `YYYY/MM/DD [W]W/[D]E dddd MMMM Do - [D]${doy}/366[R]`;\n    },\n  },\n}\n          \n/**\n * Todo:\n * - Better naming\n * - Use decay function\n */\nexport class DB {\n  counts: Map<string, number>;\n\n  constructor() {\n    const localStorageCounts = window.localStorage.getItem('counts');\n    const counts: Map<string, number> = localStorageCounts ? new Map(JSON.parse(localStorageCounts)) : new Map();\n\n    Object.keys(formats).forEach(key => {\n      if (!counts.has(key)) {\n        counts.set(key, 0);\n      }\n    })\n\n    this.counts = counts;\n  }\n\n  popular() {\n    return Array.from(this.counts.entries()).sort((a: [keyof Formats, number], b: [keyof Formats, number]) => b[1] - a[1]);\n  }\n\n  increment(key: string) {\n    const value = this.counts.get(key);\n    if (value) {\n      this.counts.set(key, value + 1);\n    } else {\n      this.counts.set(key, 1);\n    }\n\n    const map = Array.from(this.counts.entries());\n    window.localStorage.setItem('counts', JSON.stringify(map));\n  }\n}","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-env browser */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}